/*
Discovery Configuration API V2

The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clouddiscovery

import (
	"encoding/json"
)

// checks if the DdidnsrickettsIPAMConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DdidnsrickettsIPAMConfig{}

// DdidnsrickettsIPAMConfig struct for DdidnsrickettsIPAMConfig
type DdidnsrickettsIPAMConfig struct {
	DhcpServer           *string `json:"dhcp_server,omitempty"`
	IpSpace              *string `json:"ip_space,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DdidnsrickettsIPAMConfig DdidnsrickettsIPAMConfig

// NewDdidnsrickettsIPAMConfig instantiates a new DdidnsrickettsIPAMConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDdidnsrickettsIPAMConfig() *DdidnsrickettsIPAMConfig {
	this := DdidnsrickettsIPAMConfig{}
	return &this
}

// NewDdidnsrickettsIPAMConfigWithDefaults instantiates a new DdidnsrickettsIPAMConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDdidnsrickettsIPAMConfigWithDefaults() *DdidnsrickettsIPAMConfig {
	this := DdidnsrickettsIPAMConfig{}
	return &this
}

// GetDhcpServer returns the DhcpServer field value if set, zero value otherwise.
func (o *DdidnsrickettsIPAMConfig) GetDhcpServer() string {
	if o == nil || IsNil(o.DhcpServer) {
		var ret string
		return ret
	}
	return *o.DhcpServer
}

// GetDhcpServerOk returns a tuple with the DhcpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsIPAMConfig) GetDhcpServerOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpServer) {
		return nil, false
	}
	return o.DhcpServer, true
}

// HasDhcpServer returns a boolean if a field has been set.
func (o *DdidnsrickettsIPAMConfig) HasDhcpServer() bool {
	if o != nil && !IsNil(o.DhcpServer) {
		return true
	}

	return false
}

// SetDhcpServer gets a reference to the given string and assigns it to the DhcpServer field.
func (o *DdidnsrickettsIPAMConfig) SetDhcpServer(v string) {
	o.DhcpServer = &v
}

// GetIpSpace returns the IpSpace field value if set, zero value otherwise.
func (o *DdidnsrickettsIPAMConfig) GetIpSpace() string {
	if o == nil || IsNil(o.IpSpace) {
		var ret string
		return ret
	}
	return *o.IpSpace
}

// GetIpSpaceOk returns a tuple with the IpSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsIPAMConfig) GetIpSpaceOk() (*string, bool) {
	if o == nil || IsNil(o.IpSpace) {
		return nil, false
	}
	return o.IpSpace, true
}

// HasIpSpace returns a boolean if a field has been set.
func (o *DdidnsrickettsIPAMConfig) HasIpSpace() bool {
	if o != nil && !IsNil(o.IpSpace) {
		return true
	}

	return false
}

// SetIpSpace gets a reference to the given string and assigns it to the IpSpace field.
func (o *DdidnsrickettsIPAMConfig) SetIpSpace(v string) {
	o.IpSpace = &v
}

func (o DdidnsrickettsIPAMConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DdidnsrickettsIPAMConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DhcpServer) {
		toSerialize["dhcp_server"] = o.DhcpServer
	}
	if !IsNil(o.IpSpace) {
		toSerialize["ip_space"] = o.IpSpace
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DdidnsrickettsIPAMConfig) UnmarshalJSON(data []byte) (err error) {
	varDdidnsrickettsIPAMConfig := _DdidnsrickettsIPAMConfig{}

	err = json.Unmarshal(data, &varDdidnsrickettsIPAMConfig)

	if err != nil {
		return err
	}

	*o = DdidnsrickettsIPAMConfig(varDdidnsrickettsIPAMConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dhcp_server")
		delete(additionalProperties, "ip_space")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDdidnsrickettsIPAMConfig struct {
	value *DdidnsrickettsIPAMConfig
	isSet bool
}

func (v NullableDdidnsrickettsIPAMConfig) Get() *DdidnsrickettsIPAMConfig {
	return v.value
}

func (v *NullableDdidnsrickettsIPAMConfig) Set(val *DdidnsrickettsIPAMConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDdidnsrickettsIPAMConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDdidnsrickettsIPAMConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDdidnsrickettsIPAMConfig(val *DdidnsrickettsIPAMConfig) *NullableDdidnsrickettsIPAMConfig {
	return &NullableDdidnsrickettsIPAMConfig{value: val, isSet: true}
}

func (v NullableDdidnsrickettsIPAMConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDdidnsrickettsIPAMConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
