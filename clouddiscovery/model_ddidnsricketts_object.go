/*
Discovery Configuration API V2

The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clouddiscovery

import (
	"encoding/json"
)

// checks if the DdidnsrickettsObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DdidnsrickettsObject{}

// DdidnsrickettsObject struct for DdidnsrickettsObject
type DdidnsrickettsObject struct {
	Category             *DdidnsrickettsCategory  `json:"category,omitempty"`
	ResourceSet          []DdidnsrickettsResource `json:"resource_set,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DdidnsrickettsObject DdidnsrickettsObject

// NewDdidnsrickettsObject instantiates a new DdidnsrickettsObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDdidnsrickettsObject() *DdidnsrickettsObject {
	this := DdidnsrickettsObject{}
	return &this
}

// NewDdidnsrickettsObjectWithDefaults instantiates a new DdidnsrickettsObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDdidnsrickettsObjectWithDefaults() *DdidnsrickettsObject {
	this := DdidnsrickettsObject{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *DdidnsrickettsObject) GetCategory() DdidnsrickettsCategory {
	if o == nil || IsNil(o.Category) {
		var ret DdidnsrickettsCategory
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsObject) GetCategoryOk() (*DdidnsrickettsCategory, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *DdidnsrickettsObject) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given DdidnsrickettsCategory and assigns it to the Category field.
func (o *DdidnsrickettsObject) SetCategory(v DdidnsrickettsCategory) {
	o.Category = &v
}

// GetResourceSet returns the ResourceSet field value if set, zero value otherwise.
func (o *DdidnsrickettsObject) GetResourceSet() []DdidnsrickettsResource {
	if o == nil || IsNil(o.ResourceSet) {
		var ret []DdidnsrickettsResource
		return ret
	}
	return o.ResourceSet
}

// GetResourceSetOk returns a tuple with the ResourceSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsObject) GetResourceSetOk() ([]DdidnsrickettsResource, bool) {
	if o == nil || IsNil(o.ResourceSet) {
		return nil, false
	}
	return o.ResourceSet, true
}

// HasResourceSet returns a boolean if a field has been set.
func (o *DdidnsrickettsObject) HasResourceSet() bool {
	if o != nil && !IsNil(o.ResourceSet) {
		return true
	}

	return false
}

// SetResourceSet gets a reference to the given []DdidnsrickettsResource and assigns it to the ResourceSet field.
func (o *DdidnsrickettsObject) SetResourceSet(v []DdidnsrickettsResource) {
	o.ResourceSet = v
}

func (o DdidnsrickettsObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DdidnsrickettsObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.ResourceSet) {
		toSerialize["resource_set"] = o.ResourceSet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DdidnsrickettsObject) UnmarshalJSON(data []byte) (err error) {
	varDdidnsrickettsObject := _DdidnsrickettsObject{}

	err = json.Unmarshal(data, &varDdidnsrickettsObject)

	if err != nil {
		return err
	}

	*o = DdidnsrickettsObject(varDdidnsrickettsObject)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "category")
		delete(additionalProperties, "resource_set")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDdidnsrickettsObject struct {
	value *DdidnsrickettsObject
	isSet bool
}

func (v NullableDdidnsrickettsObject) Get() *DdidnsrickettsObject {
	return v.value
}

func (v *NullableDdidnsrickettsObject) Set(val *DdidnsrickettsObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDdidnsrickettsObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDdidnsrickettsObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDdidnsrickettsObject(val *DdidnsrickettsObject) *NullableDdidnsrickettsObject {
	return &NullableDdidnsrickettsObject{value: val, isSet: true}
}

func (v NullableDdidnsrickettsObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDdidnsrickettsObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
