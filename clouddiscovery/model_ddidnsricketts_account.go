/*
Discovery Configuration API V2

The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clouddiscovery

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DdidnsrickettsAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DdidnsrickettsAccount{}

// DdidnsrickettsAccount Source account information
type DdidnsrickettsAccount struct {
	CompositeStatus *string `json:"composite_status,omitempty"`
	// Status message of the sync operation.
	CompositeStatusMessage *string `json:"composite_status_message,omitempty"`
	// Timestamp when the object has been created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Timestamp when the object has been deleted.
	DeletedAt    *time.Time `json:"deleted_at,omitempty"`
	DhcpServerId *string    `json:"dhcp_server_id,omitempty"`
	// DNS Server ID.
	DnsServerId *string `json:"dns_server_id,omitempty"`
	// Auto-generated unique source account ID. Format BloxID.
	Id *string `json:"id,omitempty"`
	// Last successful sync timestamp.
	LastSuccessfulSync *time.Time `json:"last_successful_sync,omitempty"`
	// Last sync timestamp.
	LastSync *time.Time `json:"last_sync,omitempty"`
	// Name of the source account.
	Name string `json:"name"`
	// Parent ID.
	ParentId *string `json:"parent_id,omitempty"`
	// Sync progress as a percentage.
	PercentComplete   *int32  `json:"percent_complete,omitempty"`
	ProviderAccountId *string `json:"provider_account_id,omitempty"`
	// Schedule ID.
	ScheduleId *string `json:"schedule_id,omitempty"`
	State      *string `json:"state,omitempty"`
	// Status of the sync operation.
	Status *string `json:"status,omitempty"`
	// Status message of the sync operation.
	StatusMessage *string `json:"status_message,omitempty"`
	// Timestamp when the object has been updated.
	UpdatedAt            *time.Time `json:"updated_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DdidnsrickettsAccount DdidnsrickettsAccount

// NewDdidnsrickettsAccount instantiates a new DdidnsrickettsAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDdidnsrickettsAccount(name string) *DdidnsrickettsAccount {
	this := DdidnsrickettsAccount{}
	this.Name = name
	return &this
}

// NewDdidnsrickettsAccountWithDefaults instantiates a new DdidnsrickettsAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDdidnsrickettsAccountWithDefaults() *DdidnsrickettsAccount {
	this := DdidnsrickettsAccount{}
	return &this
}

// GetCompositeStatus returns the CompositeStatus field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetCompositeStatus() string {
	if o == nil || IsNil(o.CompositeStatus) {
		var ret string
		return ret
	}
	return *o.CompositeStatus
}

// GetCompositeStatusOk returns a tuple with the CompositeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetCompositeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CompositeStatus) {
		return nil, false
	}
	return o.CompositeStatus, true
}

// HasCompositeStatus returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasCompositeStatus() bool {
	if o != nil && !IsNil(o.CompositeStatus) {
		return true
	}

	return false
}

// SetCompositeStatus gets a reference to the given string and assigns it to the CompositeStatus field.
func (o *DdidnsrickettsAccount) SetCompositeStatus(v string) {
	o.CompositeStatus = &v
}

// GetCompositeStatusMessage returns the CompositeStatusMessage field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetCompositeStatusMessage() string {
	if o == nil || IsNil(o.CompositeStatusMessage) {
		var ret string
		return ret
	}
	return *o.CompositeStatusMessage
}

// GetCompositeStatusMessageOk returns a tuple with the CompositeStatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetCompositeStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.CompositeStatusMessage) {
		return nil, false
	}
	return o.CompositeStatusMessage, true
}

// HasCompositeStatusMessage returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasCompositeStatusMessage() bool {
	if o != nil && !IsNil(o.CompositeStatusMessage) {
		return true
	}

	return false
}

// SetCompositeStatusMessage gets a reference to the given string and assigns it to the CompositeStatusMessage field.
func (o *DdidnsrickettsAccount) SetCompositeStatusMessage(v string) {
	o.CompositeStatusMessage = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DdidnsrickettsAccount) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *DdidnsrickettsAccount) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetDhcpServerId returns the DhcpServerId field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetDhcpServerId() string {
	if o == nil || IsNil(o.DhcpServerId) {
		var ret string
		return ret
	}
	return *o.DhcpServerId
}

// GetDhcpServerIdOk returns a tuple with the DhcpServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetDhcpServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpServerId) {
		return nil, false
	}
	return o.DhcpServerId, true
}

// HasDhcpServerId returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasDhcpServerId() bool {
	if o != nil && !IsNil(o.DhcpServerId) {
		return true
	}

	return false
}

// SetDhcpServerId gets a reference to the given string and assigns it to the DhcpServerId field.
func (o *DdidnsrickettsAccount) SetDhcpServerId(v string) {
	o.DhcpServerId = &v
}

// GetDnsServerId returns the DnsServerId field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetDnsServerId() string {
	if o == nil || IsNil(o.DnsServerId) {
		var ret string
		return ret
	}
	return *o.DnsServerId
}

// GetDnsServerIdOk returns a tuple with the DnsServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetDnsServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.DnsServerId) {
		return nil, false
	}
	return o.DnsServerId, true
}

// HasDnsServerId returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasDnsServerId() bool {
	if o != nil && !IsNil(o.DnsServerId) {
		return true
	}

	return false
}

// SetDnsServerId gets a reference to the given string and assigns it to the DnsServerId field.
func (o *DdidnsrickettsAccount) SetDnsServerId(v string) {
	o.DnsServerId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DdidnsrickettsAccount) SetId(v string) {
	o.Id = &v
}

// GetLastSuccessfulSync returns the LastSuccessfulSync field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetLastSuccessfulSync() time.Time {
	if o == nil || IsNil(o.LastSuccessfulSync) {
		var ret time.Time
		return ret
	}
	return *o.LastSuccessfulSync
}

// GetLastSuccessfulSyncOk returns a tuple with the LastSuccessfulSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetLastSuccessfulSyncOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSuccessfulSync) {
		return nil, false
	}
	return o.LastSuccessfulSync, true
}

// HasLastSuccessfulSync returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasLastSuccessfulSync() bool {
	if o != nil && !IsNil(o.LastSuccessfulSync) {
		return true
	}

	return false
}

// SetLastSuccessfulSync gets a reference to the given time.Time and assigns it to the LastSuccessfulSync field.
func (o *DdidnsrickettsAccount) SetLastSuccessfulSync(v time.Time) {
	o.LastSuccessfulSync = &v
}

// GetLastSync returns the LastSync field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetLastSync() time.Time {
	if o == nil || IsNil(o.LastSync) {
		var ret time.Time
		return ret
	}
	return *o.LastSync
}

// GetLastSyncOk returns a tuple with the LastSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetLastSyncOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSync) {
		return nil, false
	}
	return o.LastSync, true
}

// HasLastSync returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasLastSync() bool {
	if o != nil && !IsNil(o.LastSync) {
		return true
	}

	return false
}

// SetLastSync gets a reference to the given time.Time and assigns it to the LastSync field.
func (o *DdidnsrickettsAccount) SetLastSync(v time.Time) {
	o.LastSync = &v
}

// GetName returns the Name field value
func (o *DdidnsrickettsAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DdidnsrickettsAccount) SetName(v string) {
	o.Name = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *DdidnsrickettsAccount) SetParentId(v string) {
	o.ParentId = &v
}

// GetPercentComplete returns the PercentComplete field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetPercentComplete() int32 {
	if o == nil || IsNil(o.PercentComplete) {
		var ret int32
		return ret
	}
	return *o.PercentComplete
}

// GetPercentCompleteOk returns a tuple with the PercentComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetPercentCompleteOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentComplete) {
		return nil, false
	}
	return o.PercentComplete, true
}

// HasPercentComplete returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasPercentComplete() bool {
	if o != nil && !IsNil(o.PercentComplete) {
		return true
	}

	return false
}

// SetPercentComplete gets a reference to the given int32 and assigns it to the PercentComplete field.
func (o *DdidnsrickettsAccount) SetPercentComplete(v int32) {
	o.PercentComplete = &v
}

// GetProviderAccountId returns the ProviderAccountId field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetProviderAccountId() string {
	if o == nil || IsNil(o.ProviderAccountId) {
		var ret string
		return ret
	}
	return *o.ProviderAccountId
}

// GetProviderAccountIdOk returns a tuple with the ProviderAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetProviderAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderAccountId) {
		return nil, false
	}
	return o.ProviderAccountId, true
}

// HasProviderAccountId returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasProviderAccountId() bool {
	if o != nil && !IsNil(o.ProviderAccountId) {
		return true
	}

	return false
}

// SetProviderAccountId gets a reference to the given string and assigns it to the ProviderAccountId field.
func (o *DdidnsrickettsAccount) SetProviderAccountId(v string) {
	o.ProviderAccountId = &v
}

// GetScheduleId returns the ScheduleId field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetScheduleId() string {
	if o == nil || IsNil(o.ScheduleId) {
		var ret string
		return ret
	}
	return *o.ScheduleId
}

// GetScheduleIdOk returns a tuple with the ScheduleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetScheduleIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleId) {
		return nil, false
	}
	return o.ScheduleId, true
}

// HasScheduleId returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasScheduleId() bool {
	if o != nil && !IsNil(o.ScheduleId) {
		return true
	}

	return false
}

// SetScheduleId gets a reference to the given string and assigns it to the ScheduleId field.
func (o *DdidnsrickettsAccount) SetScheduleId(v string) {
	o.ScheduleId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DdidnsrickettsAccount) SetState(v string) {
	o.State = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DdidnsrickettsAccount) SetStatus(v string) {
	o.Status = &v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetStatusMessage() string {
	if o == nil || IsNil(o.StatusMessage) {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StatusMessage) {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasStatusMessage() bool {
	if o != nil && !IsNil(o.StatusMessage) {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *DdidnsrickettsAccount) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DdidnsrickettsAccount) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsAccount) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DdidnsrickettsAccount) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DdidnsrickettsAccount) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DdidnsrickettsAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DdidnsrickettsAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompositeStatus) {
		toSerialize["composite_status"] = o.CompositeStatus
	}
	if !IsNil(o.CompositeStatusMessage) {
		toSerialize["composite_status_message"] = o.CompositeStatusMessage
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.DhcpServerId) {
		toSerialize["dhcp_server_id"] = o.DhcpServerId
	}
	if !IsNil(o.DnsServerId) {
		toSerialize["dns_server_id"] = o.DnsServerId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastSuccessfulSync) {
		toSerialize["last_successful_sync"] = o.LastSuccessfulSync
	}
	if !IsNil(o.LastSync) {
		toSerialize["last_sync"] = o.LastSync
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.ParentId) {
		toSerialize["parent_id"] = o.ParentId
	}
	if !IsNil(o.PercentComplete) {
		toSerialize["percent_complete"] = o.PercentComplete
	}
	if !IsNil(o.ProviderAccountId) {
		toSerialize["provider_account_id"] = o.ProviderAccountId
	}
	if !IsNil(o.ScheduleId) {
		toSerialize["schedule_id"] = o.ScheduleId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusMessage) {
		toSerialize["status_message"] = o.StatusMessage
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DdidnsrickettsAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDdidnsrickettsAccount := _DdidnsrickettsAccount{}

	err = json.Unmarshal(data, &varDdidnsrickettsAccount)

	if err != nil {
		return err
	}

	*o = DdidnsrickettsAccount(varDdidnsrickettsAccount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "composite_status")
		delete(additionalProperties, "composite_status_message")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "deleted_at")
		delete(additionalProperties, "dhcp_server_id")
		delete(additionalProperties, "dns_server_id")
		delete(additionalProperties, "id")
		delete(additionalProperties, "last_successful_sync")
		delete(additionalProperties, "last_sync")
		delete(additionalProperties, "name")
		delete(additionalProperties, "parent_id")
		delete(additionalProperties, "percent_complete")
		delete(additionalProperties, "provider_account_id")
		delete(additionalProperties, "schedule_id")
		delete(additionalProperties, "state")
		delete(additionalProperties, "status")
		delete(additionalProperties, "status_message")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDdidnsrickettsAccount struct {
	value *DdidnsrickettsAccount
	isSet bool
}

func (v NullableDdidnsrickettsAccount) Get() *DdidnsrickettsAccount {
	return v.value
}

func (v *NullableDdidnsrickettsAccount) Set(val *DdidnsrickettsAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableDdidnsrickettsAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableDdidnsrickettsAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDdidnsrickettsAccount(val *DdidnsrickettsAccount) *NullableDdidnsrickettsAccount {
	return &NullableDdidnsrickettsAccount{value: val, isSet: true}
}

func (v NullableDdidnsrickettsAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDdidnsrickettsAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
