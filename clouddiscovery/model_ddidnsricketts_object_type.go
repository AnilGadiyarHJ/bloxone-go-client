/*
Discovery Configuration API V2

The Discovery configuration service is a BloxOne Service that provides configuration for accessing and syncing the Cloud assets   Base Paths:  1. provider: **_/api/cloud_discovery/v2/_**

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clouddiscovery

import (
	"encoding/json"
)

// checks if the DdidnsrickettsObjectType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DdidnsrickettsObjectType{}

// DdidnsrickettsObjectType struct for DdidnsrickettsObjectType
type DdidnsrickettsObjectType struct {
	DiscoverNew          *bool                  `json:"discover_new,omitempty"`
	Objects              []DdidnsrickettsObject `json:"objects,omitempty"`
	Version              *float32               `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DdidnsrickettsObjectType DdidnsrickettsObjectType

// NewDdidnsrickettsObjectType instantiates a new DdidnsrickettsObjectType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDdidnsrickettsObjectType() *DdidnsrickettsObjectType {
	this := DdidnsrickettsObjectType{}
	return &this
}

// NewDdidnsrickettsObjectTypeWithDefaults instantiates a new DdidnsrickettsObjectType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDdidnsrickettsObjectTypeWithDefaults() *DdidnsrickettsObjectType {
	this := DdidnsrickettsObjectType{}
	return &this
}

// GetDiscoverNew returns the DiscoverNew field value if set, zero value otherwise.
func (o *DdidnsrickettsObjectType) GetDiscoverNew() bool {
	if o == nil || IsNil(o.DiscoverNew) {
		var ret bool
		return ret
	}
	return *o.DiscoverNew
}

// GetDiscoverNewOk returns a tuple with the DiscoverNew field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsObjectType) GetDiscoverNewOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscoverNew) {
		return nil, false
	}
	return o.DiscoverNew, true
}

// HasDiscoverNew returns a boolean if a field has been set.
func (o *DdidnsrickettsObjectType) HasDiscoverNew() bool {
	if o != nil && !IsNil(o.DiscoverNew) {
		return true
	}

	return false
}

// SetDiscoverNew gets a reference to the given bool and assigns it to the DiscoverNew field.
func (o *DdidnsrickettsObjectType) SetDiscoverNew(v bool) {
	o.DiscoverNew = &v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *DdidnsrickettsObjectType) GetObjects() []DdidnsrickettsObject {
	if o == nil || IsNil(o.Objects) {
		var ret []DdidnsrickettsObject
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsObjectType) GetObjectsOk() ([]DdidnsrickettsObject, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *DdidnsrickettsObjectType) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []DdidnsrickettsObject and assigns it to the Objects field.
func (o *DdidnsrickettsObjectType) SetObjects(v []DdidnsrickettsObject) {
	o.Objects = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DdidnsrickettsObjectType) GetVersion() float32 {
	if o == nil || IsNil(o.Version) {
		var ret float32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DdidnsrickettsObjectType) GetVersionOk() (*float32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DdidnsrickettsObjectType) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given float32 and assigns it to the Version field.
func (o *DdidnsrickettsObjectType) SetVersion(v float32) {
	o.Version = &v
}

func (o DdidnsrickettsObjectType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DdidnsrickettsObjectType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiscoverNew) {
		toSerialize["discover_new"] = o.DiscoverNew
	}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DdidnsrickettsObjectType) UnmarshalJSON(data []byte) (err error) {
	varDdidnsrickettsObjectType := _DdidnsrickettsObjectType{}

	err = json.Unmarshal(data, &varDdidnsrickettsObjectType)

	if err != nil {
		return err
	}

	*o = DdidnsrickettsObjectType(varDdidnsrickettsObjectType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "discover_new")
		delete(additionalProperties, "objects")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDdidnsrickettsObjectType struct {
	value *DdidnsrickettsObjectType
	isSet bool
}

func (v NullableDdidnsrickettsObjectType) Get() *DdidnsrickettsObjectType {
	return v.value
}

func (v *NullableDdidnsrickettsObjectType) Set(val *DdidnsrickettsObjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableDdidnsrickettsObjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableDdidnsrickettsObjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDdidnsrickettsObjectType(val *DdidnsrickettsObjectType) *NullableDdidnsrickettsObjectType {
	return &NullableDdidnsrickettsObjectType{value: val, isSet: true}
}

func (v NullableDdidnsrickettsObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDdidnsrickettsObjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
